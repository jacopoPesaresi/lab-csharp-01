URL https://github.com/jacopoPesaresi/lab-csharp-01.git

CLONE git@github.com:jacopoPesaresi/lab-csharp-01.git

BRANCH master

LAB 1-Properties

LAB 2-ComplexAlgebra

CASA 3-Calculus
Non ho pensato di usare un Nullables quando non c'è una operazione settata su un + o un -, ma di usare un valore incompatibile con un qualche simbolo che racchiudesse una operazione matematica
ToString lievemente diverso, ma il succo è lo stesso
Ho previsto un metodo unico per eseguire il calcolo separato da quello pubblico, in quanto quello salva il risultato in Value mentre il resto dei calcoli deve essere salvato nel "tmpValue"
Invece di usare lo switch ho fatto lo scorrimento dei simboli matematici con quella che poteva divetare una catena di if-else
Per il resto, le differenze derivano dai punti cardine evidenziati sopra (principalmente da non aver usato il nullable e per non aver riciclato il metodo pubblico avendone creato un'altro)

CASA 4-Arrays
In MaxModulus ho usato un approccio algoritmistico (oltre che, alla fine, un foreach), partendo dal valore minore possibile in funzione dell'aspetto massimo... ma sono praticamente identiche
Clone è identica... se non fosse che ho esplicitato il costruttore dei Complex per creare 
[Dubbio: non c'è bisogno di creare un nuovo oggetto, per mantenere intatti i valori di array se quelli del clone vengono modificati, eseguendo una sorta di copia difensiva? O è intrinseca nella sintassi C#?]
SortByPhase praticamente come Clone
[e qui a maggior ragione sottolineo il mio dubbio]
ArrayToString è uguale anche quello, anche se io ho sfruttato più volte il + concatenatore riducendo quindi le righe di codice

CASA 5-Iterators
In Indexed invece di Tuple.Create ho usato il new Tuple
La Reduce la ho sviluppata usando sempre "seed"... può comunque andare o ogni modifica sarebbe stata "quadratica"? (nel senso, nei test ho visto che la modifica è un semplice incremento, quindi ancora accettabile per come ho strutturato il metodo (penso), ma se invece di un incremento era un *2 poteva essere un problema?)
SkipWhile la ho strutturata come una Filter inversa... TakeWhile invece è proprio la Filter... Non ci ho pensato mentre le sviluppavo, ops (avrei modificato il codice, ma come da specifiche preferisco lasciarlo così)
Integers lo ho sviluppato in un'unica riga, "senza fare una copia difensiva di start" (e senza neanche fare un ciclo while true)
[Dubbio: era così necessario usare il foreach? Ho espresso il mio dubbio nel metodo "Map"]

CASA 6-Indexers
potevo rendere "readonly" la struttura dati all'interno della classe
ho previsto un costruttore per la classe (seppur vuoto), al fine di creare la struttura dati (potevo farlo sulla linea che 
NumberOfElements potevo limitarmi alla "=>"
(dopo l'ultima correzzione ho modificato la creazione delle Tuple, solo che riscontro altre differenze, che mi sono permesso di rimodificare)
poi in generale non ho usato le LINQ... e quindi le differenze sono palesi...
Non ho previsto tutti quei Equals (che effettivamente irrobustiscono il tutto, e che anzi pensavo fosse necessario fare tutt'altra cosa, e che quindi non c'entra niente...), limitandomi a un solo Equals (senza precedenti controlli del tipo che "other" non deve essere null, eccetera, e che effettivamente erano importanti) che si appoggia sulla funzione "ToString"
In GetHashCode non ho fatto (neanche qui) il controllo che "data" non fosse null... e ho riciclato la funzione consigliata in laboratorio dai docenti "HashCode.Combine(...)"
[Curiosità/Dubbi]
Per esplorare la mappa con il foreach ho usato un "KeyValuePair", è un pò come l'Entry nelle Map di Java no?
Non ho capito perchè nella vostra Fill si converte keys2 in un Array... non si poteva scorrerlo come fatto in keys1? (che è poi quello che ho fatto io)

CASA 6-IndexersTests
(avevo provato a fare un mio test, ma senza particolari successi, quindi ho rimosso quelle righe di codice)
Nonostante tutti gli errori soprastanti, son riuscito a passare i test
